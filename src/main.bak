typedef struct _DictRec DictRec;
struct _DictRec {
    AlphaChar *key;
    TrieData   data;
};

typedef struct _TrieState TrieState;
struct _TrieState {
    const Trie *trie;       /**< the corresponding trie */
    TrieIndex   index;      /**< index in double-array/tail structures */
    short       suffix_idx; /**< suffix character offset, if in suffix */
    short       is_suffix;  /**< whether it is currently in suffix part */
};

#define ALPHABET_SIZE 256

void
msg_step (const char *msg)
{
    printf ("=> %s...\n", msg);
}

// 编译器优化
#if defined(__GNUC__) && (__GNUC__ > 2) && defined(__OPTIMIZE__)
#define LIKELY(expr) (__builtin_expect (!!(expr), 1))
#define UNLIKELY(expr) (__builtin_expect (!!(expr), 0))
#else
#define LIKELY(expr) (expr)
#define UNLIKELY(expr) (expr)
#endif

typedef uint32         AlphaChar;



AlphaMap *
alpha_map_new (void)
{
    AlphaMap   *alpha_map;

    alpha_map = (AlphaMap *) malloc (sizeof (AlphaMap));
    if (UNLIKELY (!alpha_map))
        return NULL;

    alpha_map->first_range = NULL;

    /* work area */
    alpha_map->alpha_begin = 0;
    alpha_map->alpha_end = 0;
    alpha_map->alpha_map_sz = 0;
    alpha_map->alpha_to_trie_map = NULL;

    alpha_map->trie_map_sz = 0;
    alpha_map->trie_to_alpha_map = NULL;

    return alpha_map;
}

static AlphaMap *
en_alpha_map_new (void)
{
    AlphaMap *en_map;

    en_map = alpha_map_new ();
    if (!en_map)
        goto err_map_not_created;

    if (alpha_map_add_range (en_map, 0x0061, 0x007a) != 0)
        goto err_map_created;

    return en_map;

err_map_created:
    alpha_map_free (en_map);
err_map_not_created:
    return NULL;
}

Trie *
en_trie_new (void)
{
    AlphaMap *en_map;
    Trie     *en_trie;

    en_map = en_alpha_map_new ();
    if (!en_map)
        goto err_map_not_created;

    en_trie = trie_new (en_map);
    if (!en_trie)
        goto err_map_created;

    alpha_map_free (en_map);
    return en_trie;

err_map_created:
    alpha_map_free (en_map);
err_map_not_created:
    return NULL;
}


struct _Trie {
    AlphaMap   *alpha_map;
    DArray     *da;
    Tail       *tail;

    Bool        is_dirty;
};

typedef struct _Trie   Trie;

typedef uint32         AlphaChar;
typedef int32          TrieData;
typedef int32          TrieIndex;

TrieIndex
da_get_root (const DArray *d)
{
    /* can be calculated value for multi-index trie */
    return 2;
}

typedef struct {
    TrieIndex   base;
    TrieIndex   check;
} DACell;

struct _DArray {
    TrieIndex   num_cells;
    DACell     *cells;
};
typedef struct _DArray  DArray;

#define DA_SIGNATURE 0xDAFCDAFC
#define DA_POOL_BEGIN 3

DArray *
da_new (void)
{
    DArray     *d;

    d = (DArray *) malloc (sizeof (DArray));
    if (UNLIKELY (!d))
        return NULL;

    d->num_cells = DA_POOL_BEGIN;
    d->cells     = (DACell *) malloc (d->num_cells * sizeof (DACell));
    if (UNLIKELY (!d->cells))
        goto exit_da_created;
    d->cells[0].base = DA_SIGNATURE;
    d->cells[0].check = d->num_cells;
    d->cells[1].base = -1;
    d->cells[1].check = -1;
    d->cells[2].base = DA_POOL_BEGIN;
    d->cells[2].check = 0;

    return d;

exit_da_created:
    free (d);
    return NULL;
}

Trie *
trie_new (const AlphaMap *alpha_map)
{
    Trie *trie;

    trie = (Trie *) malloc (sizeof (Trie));
    if (UNLIKELY (!trie))
        return NULL;

    trie->alpha_map = alpha_map_clone (alpha_map);
    if (UNLIKELY (!trie->alpha_map))
        goto exit_trie_created;

    trie->da = da_new ();
    if (UNLIKELY (!trie->da))
        goto exit_alpha_map_created;

    trie->tail = tail_new ();
    if (UNLIKELY (!trie->tail))
        goto exit_da_created;

    trie->is_dirty = TRUE;
    return trie;

exit_da_created:
    da_free (trie->da);
exit_alpha_map_created:
    alpha_map_free (trie->alpha_map);
exit_trie_created:
    free (trie);
    return NULL;
}

TrieIndex
da_get_base (const DArray *d, TrieIndex s)
{
    return LIKELY (s < d->num_cells) ? d->cells[s].base : TRIE_INDEX_ERROR;
}
#define trie_da_is_separate(da,s)      (da_get_base ((da), (s)) < 0)

Trie *
en_trie_new (void)
{
    AlphaMap *en_map;
    Trie     *en_trie;

    en_map = en_alpha_map_new ();
    if (!en_map)
        goto err_map_not_created;

    en_trie = trie_new (en_map);
    if (!en_trie)
        goto err_map_created;

    alpha_map_free (en_map);
    return en_trie;

err_map_created:
    alpha_map_free (en_map);
err_map_not_created:
    return NULL;
}


int
main (void)
{
    Trie       *test_trie;
    DictRec    *dict_p;
    TrieState  *s, *t, *u;
    AlphaChar   walkables[ALPHABET_SIZE];
    int         n;
    Bool        is_failed;
    TrieData    data;

    msg_step ("Preparing trie");
    test_trie = en_trie_new ();
    if (!test_trie) {
        fprintf (stderr, "Fail to create test trie\n");
        goto err_trie_not_created;
    }

    /* store */
    for (dict_p = walk_dict; dict_p->key; dict_p++) {
        if (!trie_store (test_trie, dict_p->key, dict_p->data)) {
            printf ("Failed to add key '%ls', data %d.\n",
                    (wchar_t *)dict_p->key, dict_p->data);
            goto err_trie_created;
        }
    }

    printf (
        "Now the trie structure is supposed to be:\n"
        "\n"
    );
    printf (
        "          +---o-> (3) -o-> (4) -l-> [5]\n"
        "          |\n"
        "          |        +---i-> (7) -z-> (8) -e-> [9]\n"
        "          |        |\n"
        "(1) -p-> (2) -r-> (6) -e-> (10) -v-> (11) -i-> (12) -e-> (13) -w-> [14]\n"
        "                   |         |\n"
        "                   |         +---p-> (15) -a-> (16) -r-> (17) -e-> [18]\n"
        "                   |\n"
        "                   +---o-> (19) -d-> (20) -u-> (21) -c-> (22) -e-> [23]\n"
        "                             |\n"
        "                             +---g-> (24) -r-> (25) -e-> (26) -s-> (27) -s-> [28]\n"
        "\n"
    );

    /* walk */
    msg_step ("Test walking");
    s = trie_root (test_trie);
    if (!s) {
        printf ("Failed to get trie root state\n");
        goto err_trie_created;
    }

    msg_step ("Test walking with 'p'");
    if (!trie_state_is_walkable (s, L'p')) {
        printf ("Trie state is not walkable with 'p'\n");
        goto err_trie_state_s_created;
    }
    if (!trie_state_walk (s, L'p')) {
        printf ("Failed to walk with 'p'\n");
        goto err_trie_state_s_created;
    }

    msg_step ("Now at (2), walkable chars should be {'o', 'r'}");
    is_failed = FALSE;
    n = trie_state_walkable_chars (s, walkables, ALPHABET_SIZE);
    if (2 != n) {
        printf ("Walkable chars should be exactly 2, got %d\n", n);
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'o', walkables, n)) {
        printf ("Walkable chars do not include 'o'\n");
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'r', walkables, n)) {
        printf ("Walkable chars do not include 'r'\n");
        is_failed = TRUE;
    }
    if (is_failed) {
        printf ("Walkables = ");
        print_walkables (walkables, n);
        printf ("\n");
        goto err_trie_state_s_created;
    }

    msg_step ("Try walking from (2) with 'o' to (3)");
    t = trie_state_clone (s);
    if (!t) {
        printf ("Failed to clone trie state\n");
        goto err_trie_state_s_created;
    }
    if (!trie_state_walk (t, L'o')) {
        printf ("Failed to walk from (2) with 'o' to (3)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_single (t)) {
        printf ("(3) should be single, but isn't.\n");
        goto err_trie_state_t_created;
    }

    msg_step ("Try walking from (3) with 'o' to (4)");
    if (!trie_state_walk (t, L'o')) {
        printf ("Failed to walk from (3) with 'o' to (4)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_single (t)) {
        printf ("(4) should be single, but isn't.\n");
        goto err_trie_state_t_created;
    }

    msg_step ("Try walking from (4) with 'l' to (5)");
    if (!trie_state_walk (t, L'l')) {
        printf ("Failed to walk from (4) with 'l' to (5)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_terminal (t)) {
        printf ("(5) should be terminal, but isn't.\n");
        goto err_trie_state_t_created;
    }

    /* get key & data */
    msg_step ("Try getting data from (5)");
    data = trie_state_get_data (t);
    if (TRIE_DATA_ERROR == data) {
        printf ("Failed to get data from (5)\n");
        goto err_trie_state_t_created;
    }
    if (TRIE_DATA_UNREAD != data) {
        printf ("Mismatched data from (5), expected %d, got %d\n",
                TRIE_DATA_UNREAD, data);
        goto err_trie_state_t_created;
    }

    /* walk s from (2) with 'r' to (6) */
    msg_step ("Try walking from (2) with 'r' to (6)");
    if (!trie_state_walk (s, L'r')) {
        printf ("Failed to walk from (2) with 'r' to (6)\n");
        goto err_trie_state_t_created;
    }

    msg_step ("Now at (6), walkable chars should be {'e', 'i', 'o'}");
    is_failed = FALSE;
    n = trie_state_walkable_chars (s, walkables, ALPHABET_SIZE);
    if (3 != n) {
        printf ("Walkable chars should be exactly 3, got %d\n", n);
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'e', walkables, n)) {
        printf ("Walkable chars do not include 'e'\n");
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'i', walkables, n)) {
        printf ("Walkable chars do not include 'i'\n");
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'o', walkables, n)) {
        printf ("Walkable chars do not include 'o'\n");
        is_failed = TRUE;
    }
    if (is_failed) {
        printf ("Walkables = ");
        print_walkables (walkables, n);
        printf ("\n");
        goto err_trie_state_t_created;
    }

    /* walk from s (6) with "ize" */
    msg_step ("Try walking from (6) with 'i' to (7)");
    trie_state_copy (t, s);
    if (!trie_state_walk (t, L'i')) {
        printf ("Failed to walk from (6) with 'i' to (7)\n");
        goto err_trie_state_t_created;
    }
    msg_step ("Try walking from (7) with 'z' to (8)");
    if (!trie_state_walk (t, L'z')) {
        printf ("Failed to walk from (7) with 'z' to (8)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_single (t)) {
        printf ("(7) should be single, but isn't.\n");
        goto err_trie_state_t_created;
    }
    msg_step ("Try walking from (8) with 'e' to (9)");
    if (!trie_state_walk (t, L'e')) {
        printf ("Failed to walk from (8) with 'e' to (9)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_terminal (t)) {
        printf ("(9) should be terminal, but isn't.\n");
        goto err_trie_state_t_created;
    }

    msg_step ("Try getting data from (9)");
    data = trie_state_get_data (t);
    if (TRIE_DATA_ERROR == data) {
        printf ("Failed to get data from (9)\n");
        goto err_trie_state_t_created;
    }
    if (TRIE_DATA_UNREAD != data) {
        printf ("Mismatched data from (9), expected %d, got %d\n",
                TRIE_DATA_UNREAD, data);
        goto err_trie_state_t_created;
    }

    /* walk from u = s (6) with 'e' to (10) */
    msg_step ("Try walking from (6) with 'e' to (10)");
    u = trie_state_clone (s);
    if (!u) {
        printf ("Failed to clone trie state\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_walk (u, L'e')) {
        printf ("Failed to walk from (6) with 'e' to (10)\n");
        goto err_trie_state_u_created;
    }

    /* walkable chars from (10) should be {'p', 'v'} */
    msg_step ("Now at (10), walkable chars should be {'p', 'v'}");
    is_failed = FALSE;
    n = trie_state_walkable_chars (u, walkables, ALPHABET_SIZE);
    if (2 != n) {
        printf ("Walkable chars should be exactly 2, got %d\n", n);
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'p', walkables, n)) {
        printf ("Walkable chars do not include 'p'\n");
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'v', walkables, n)) {
        printf ("Walkable chars do not include 'v'\n");
        is_failed = TRUE;
    }
    if (is_failed) {
        printf ("Walkables = ");
        print_walkables (walkables, n);
        printf ("\n");
        goto err_trie_state_u_created;
    }

    /* walk from u (10) with "view" */
    msg_step ("Try walking from (10) with 'v' to (11)");
    trie_state_copy (t, u);
    if (!trie_state_walk (t, L'v')) {
        printf ("Failed to walk from (10) with 'v' to (11)\n");
        goto err_trie_state_u_created;
    }
    if (!trie_state_is_single (t)) {
        printf ("(11) should be single, but isn't.\n");
        goto err_trie_state_u_created;
    }
    msg_step ("Try walking from (11) with 'i' to (12)");
    if (!trie_state_walk (t, L'i')) {
        printf ("Failed to walk from (11) with 'i' to (12)\n");
        goto err_trie_state_u_created;
    }
    msg_step ("Try walking from (12) with 'e' to (13)");
    if (!trie_state_walk (t, L'e')) {
        printf ("Failed to walk from (12) with 'e' to (13)\n");
        goto err_trie_state_u_created;
    }
    msg_step ("Try walking from (13) with 'w' to (14)");
    if (!trie_state_walk (t, L'w')) {
        printf ("Failed to walk from (13) with 'w' to (14)\n");
        goto err_trie_state_u_created;
    }
    if (!trie_state_is_terminal (t)) {
        printf ("(14) should be terminal, but isn't.\n");
        goto err_trie_state_u_created;
    }

    msg_step ("Try getting data from (14)");
    data = trie_state_get_data (t);
    if (TRIE_DATA_ERROR == data) {
        printf ("Failed to get data from (14)\n");
        goto err_trie_state_u_created;
    }
    if (TRIE_DATA_UNREAD != data) {
        printf ("Mismatched data from (14), expected %d, got %d\n",
                TRIE_DATA_UNREAD, data);
        goto err_trie_state_u_created;
    }

    /* walk from u (10) with "pare" */
    msg_step ("Try walking from (10) with 'p' to (15)");
    trie_state_copy (t, u);
    if (!trie_state_walk (t, L'p')) {
        printf ("Failed to walk from (10) with 'p' to (15)\n");
        goto err_trie_state_u_created;
    }
    if (!trie_state_is_single (t)) {
        printf ("(15) should be single, but isn't.\n");
        goto err_trie_state_u_created;
    }
    msg_step ("Try walking from (15) with 'a' to (16)");
    if (!trie_state_walk (t, L'a')) {
        printf ("Failed to walk from (15) with 'a' to (16)\n");
        goto err_trie_state_u_created;
    }
    msg_step ("Try walking from (16) with 'r' to (17)");
    if (!trie_state_walk (t, L'r')) {
        printf ("Failed to walk from (16) with 'r' to (17)\n");
        goto err_trie_state_u_created;
    }
    msg_step ("Try walking from (17) with 'e' to (18)");
    if (!trie_state_walk (t, L'e')) {
        printf ("Failed to walk from (17) with 'e' to (18)\n");
        goto err_trie_state_u_created;
    }
    if (!trie_state_is_terminal (t)) {
        printf ("(18) should be terminal, but isn't.\n");
        goto err_trie_state_u_created;
    }

    msg_step ("Try getting data from (18)");
    data = trie_state_get_data (t);
    if (TRIE_DATA_ERROR == data) {
        printf ("Failed to get data from (18)\n");
        goto err_trie_state_u_created;
    }
    if (TRIE_DATA_UNREAD != data) {
        printf ("Mismatched data from (18), expected %d, got %d\n",
                TRIE_DATA_UNREAD, data);
        goto err_trie_state_u_created;
    }

    trie_state_free (u);

    /* walk s from (6) with 'o' to (19) */
    msg_step ("Try walking from (6) with 'o' to (19)");
    if (!trie_state_walk (s, L'o')) {
        printf ("Failed to walk from (6) with 'o' to (19)\n");
        goto err_trie_state_t_created;
    }

    msg_step ("Now at (19), walkable chars should be {'d', 'g'}");
    is_failed = FALSE;
    n = trie_state_walkable_chars (s, walkables, ALPHABET_SIZE);
    if (2 != n) {
        printf ("Walkable chars should be exactly 2, got %d\n", n);
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'd', walkables, n)) {
        printf ("Walkable chars do not include 'd'\n");
        is_failed = TRUE;
    }
    if (!is_walkables_include (L'g', walkables, n)) {
        printf ("Walkable chars do not include 'g'\n");
        is_failed = TRUE;
    }
    if (is_failed) {
        printf ("Walkables = ");
        print_walkables (walkables, n);
        printf ("\n");
        goto err_trie_state_t_created;
    }

    /* walk from s (19) with "duce" */
    msg_step ("Try walking from (19) with 'd' to (20)");
    trie_state_copy (t, s);
    if (!trie_state_walk (t, L'd')) {
        printf ("Failed to walk from (19) with 'd' to (20)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_single (t)) {
        printf ("(20) should be single, but isn't.\n");
        goto err_trie_state_t_created;
    }
    msg_step ("Try walking from (20) with 'u' to (21)");
    if (!trie_state_walk (t, L'u')) {
        printf ("Failed to walk from (20) with 'u' to (21)\n");
        goto err_trie_state_t_created;
    }
    msg_step ("Try walking from (21) with 'c' to (22)");
    if (!trie_state_walk (t, L'c')) {
        printf ("Failed to walk from (21) with 'c' to (22)\n");
        goto err_trie_state_t_created;
    }
    msg_step ("Try walking from (22) with 'e' to (23)");
    if (!trie_state_walk (t, L'e')) {
        printf ("Failed to walk from (22) with 'e' to (23)\n");
        goto err_trie_state_t_created;
    }
    if (!trie_state_is_terminal (t)) {
        printf ("(23) should be terminal, but isn't.\n");
        goto err_trie_state_t_created;
    }

    msg_step ("Try getting data from (23)");
    data = trie_state_get_data (t);
    if (TRIE_DATA_ERROR == data) {
        printf ("Failed to get data from (23)\n");
        goto err_trie_state_t_created;
    }
    if (TRIE_DATA_UNREAD != data) {
        printf ("Mismatched data from (23), expected %d, got %d\n",
                TRIE_DATA_UNREAD, data);
        goto err_trie_state_t_created;
    }

    trie_state_free (t);

    /* walk from s (19) with "gress" */
    msg_step ("Try walking from (19) with 'g' to (24)");
    if (!trie_state_walk (s, L'g')) {
        printf ("Failed to walk from (19) with 'g' to (24)\n");
        goto err_trie_state_s_created;
    }
    if (!trie_state_is_single (s)) {
        printf ("(24) should be single, but isn't.\n");
        goto err_trie_state_s_created;
    }
    msg_step ("Try walking from (24) with 'r' to (25)");
    if (!trie_state_walk (s, L'r')) {
        printf ("Failed to walk from (24) with 'r' to (25)\n");
        goto err_trie_state_s_created;
    }
    msg_step ("Try walking from (25) with 'e' to (26)");
    if (!trie_state_walk (s, L'e')) {
        printf ("Failed to walk from (25) with 'e' to (26)\n");
        goto err_trie_state_s_created;
    }
    msg_step ("Try walking from (26) with 's' to (27)");
    if (!trie_state_walk (s, L's')) {
        printf ("Failed to walk from (26) with 's' to (27)\n");
        goto err_trie_state_s_created;
    }
    msg_step ("Try walking from (27) with 's' to (28)");
    if (!trie_state_walk (s, L's')) {
        printf ("Failed to walk from (27) with 's' to (28)\n");
        goto err_trie_state_s_created;
    }
    if (!trie_state_is_terminal (s)) {
        printf ("(28) should be terminal, but isn't.\n");
        goto err_trie_state_s_created;
    }

    msg_step ("Try getting data from (28)");
    data = trie_state_get_data (s);
    if (TRIE_DATA_ERROR == data) {
        printf ("Failed to get data from (28)\n");
        goto err_trie_state_s_created;
    }
    if (TRIE_DATA_UNREAD != data) {
        printf ("Mismatched data from (28), expected %d, got %d\n",
                TRIE_DATA_UNREAD, data);
        goto err_trie_state_s_created;
    }

    trie_state_free (s);
    trie_free (test_trie);
    return 0;

err_trie_state_u_created:
    trie_state_free (u);
err_trie_state_t_created:
    trie_state_free (t);
err_trie_state_s_created:
    trie_state_free (s);
err_trie_created:
    trie_free (test_trie);
err_trie_not_created:
    return 1;
}

